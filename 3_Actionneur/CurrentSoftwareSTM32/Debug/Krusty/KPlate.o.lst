   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"KPlate.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              	.LC1:
  21 0000 504C3A20 		.ascii	"PL: Pince \340 assiette initialis\351 (DCMotor)\012"
  21      50696E63 
  21      6520E020 
  21      61737369 
  21      65747465 
  22 002a 00       		.ascii	"\000"
  23              		.text
  24              		.align	2
  25              		.global	PLATE_init
  26              		.thumb
  27              		.thumb_func
  29              	PLATE_init:
  30              	.LFB111:
  31              		.file 1 "../Krusty/KPlate.c"
   1:../Krusty/KPlate.c **** /*  Club Robot ESEO 2012 - 2013
   2:../Krusty/KPlate.c ****  *	Krusty
   3:../Krusty/KPlate.c ****  *
   4:../Krusty/KPlate.c ****  *	Fichier : Plate.c
   5:../Krusty/KPlate.c ****  *	Package : Carte actionneur
   6:../Krusty/KPlate.c ****  *	Description : Gestion de l'assiette contenant les cerises
   7:../Krusty/KPlate.c ****  *  Auteur : Alexis
   8:../Krusty/KPlate.c ****  *  Version 20130219
   9:../Krusty/KPlate.c ****  *  Robot : Krusty
  10:../Krusty/KPlate.c ****  */
  11:../Krusty/KPlate.c **** 
  12:../Krusty/KPlate.c **** #include "KPlate.h"
  13:../Krusty/KPlate.c **** #ifdef I_AM_ROBOT_KRUSTY
  14:../Krusty/KPlate.c **** 
  15:../Krusty/KPlate.c **** //#include "../QS/QS_can.h"
  16:../Krusty/KPlate.c **** #include "../QS/QS_CANmsgList.h"
  17:../Krusty/KPlate.c **** #include "../QS/QS_DCMotor2.h"
  18:../Krusty/KPlate.c **** #include "../QS/QS_ax12.h"
  19:../Krusty/KPlate.c **** #include "../QS/QS_adc.h"
  20:../Krusty/KPlate.c **** #include "../act_queue_utils.h"
  21:../Krusty/KPlate.c **** #include "config_pin.h"
  22:../Krusty/KPlate.c **** #include "KPlate_config.h"
  23:../Krusty/KPlate.c **** 
  24:../Krusty/KPlate.c **** #include "config_debug.h"
  25:../Krusty/KPlate.c **** #define LOG_PREFIX "PL: "
  26:../Krusty/KPlate.c **** #define LOG_COMPONENT OUTPUT_LOG_COMPONENT_PLATE
  27:../Krusty/KPlate.c **** #include "../QS/QS_outputlog.h"
  28:../Krusty/KPlate.c **** 
  29:../Krusty/KPlate.c **** #define PLATE_NUM_POS           3
  30:../Krusty/KPlate.c **** 	#define PLATE_HORIZONTAL_POS_ID 0
  31:../Krusty/KPlate.c **** 	#define PLATE_PREPARE_POS_ID    1
  32:../Krusty/KPlate.c **** 	#define PLATE_VERTICAL_POS_ID   2
  33:../Krusty/KPlate.c **** 
  34:../Krusty/KPlate.c **** #define PLATE_PLIER_DONT_SEND_RESULT 1
  35:../Krusty/KPlate.c **** 
  36:../Krusty/KPlate.c **** #if DCMOTOR_NB_POS < PLATE_NUM_POS
  37:../Krusty/KPlate.c **** #error "Le nombre de position disponible dans l'asservissement DCMotor n'est pas suffisant"
  38:../Krusty/KPlate.c **** #endif
  39:../Krusty/KPlate.c **** #if DCM_NUMBER <= PLATE_DCMOTOR_ID
  40:../Krusty/KPlate.c **** #error "Le nombre de DCMotor disponible n'est pas suffisant, veuillez augmenter DCM_NUMBER"
  41:../Krusty/KPlate.c **** #endif
  42:../Krusty/KPlate.c **** 
  43:../Krusty/KPlate.c **** static void PLATE_initAX12();
  44:../Krusty/KPlate.c **** static Sint16 PLATE_getRotationAngle();
  45:../Krusty/KPlate.c **** static void PLATE_rotation_command_init(queue_id_t queueId);
  46:../Krusty/KPlate.c **** static void PLATE_rotation_command_run(queue_id_t queueId);
  47:../Krusty/KPlate.c **** static void PLATE_plier_command_init(queue_id_t queueId);
  48:../Krusty/KPlate.c **** static void PLATE_plier_command_run(queue_id_t queueId);
  49:../Krusty/KPlate.c **** 
  50:../Krusty/KPlate.c **** void PLATE_init() {
  32              		.loc 1 50 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 32
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 88B0     		sub	sp, sp, #32
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 40
  44 0004 00AF     		add	r7, sp, #0
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  51:../Krusty/KPlate.c **** 	DCMotor_config_t plate_rotation_config;
  52:../Krusty/KPlate.c **** 	static bool_e initialized = FALSE;
  53:../Krusty/KPlate.c **** 
  54:../Krusty/KPlate.c **** 	if(initialized)
  47              		.loc 1 54 0
  48 0006 40F20003 		movw	r3, #:lower16:initialized.6449
  49 000a C0F20003 		movt	r3, #:upper16:initialized.6449
  50 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  51 0010 002B     		cmp	r3, #0
  52 0012 4ED1     		bne	.L1
  55:../Krusty/KPlate.c **** 		return;
  56:../Krusty/KPlate.c **** 	initialized = TRUE;
  53              		.loc 1 56 0
  54 0014 40F20003 		movw	r3, #:lower16:initialized.6449
  55 0018 C0F20003 		movt	r3, #:upper16:initialized.6449
  56 001c 4FF00102 		mov	r2, #1
  57 0020 1A70     		strb	r2, [r3, #0]
  57:../Krusty/KPlate.c **** 
  58:../Krusty/KPlate.c **** 	DCM_init();
  58              		.loc 1 58 0
  59 0022 FFF7FEFF 		bl	DCM_init
  59:../Krusty/KPlate.c **** 	AX12_init();
  60              		.loc 1 59 0
  61 0026 FFF7FEFF 		bl	AX12_init
  60:../Krusty/KPlate.c **** 	ADC_init();
  62              		.loc 1 60 0
  63 002a FFF7FEFF 		bl	ADC_init
  61:../Krusty/KPlate.c **** 
  62:../Krusty/KPlate.c **** 	plate_rotation_config.sensor_read = &PLATE_getRotationAngle;
  64              		.loc 1 62 0
  65 002e 40F20003 		movw	r3, #:lower16:PLATE_getRotationAngle
  66 0032 C0F20003 		movt	r3, #:upper16:PLATE_getRotationAngle
  67 0036 3B60     		str	r3, [r7, #0]
  63:../Krusty/KPlate.c **** 	plate_rotation_config.Kp = PLATE_ASSER_KP;
  68              		.loc 1 63 0
  69 0038 4FF4C873 		mov	r3, #400
  70 003c FB81     		strh	r3, [r7, #14]	@ movhi
  64:../Krusty/KPlate.c **** 	plate_rotation_config.Ki = PLATE_ASSER_KI;
  71              		.loc 1 64 0
  72 003e 4FF00003 		mov	r3, #0
  73 0042 3B82     		strh	r3, [r7, #16]	@ movhi
  65:../Krusty/KPlate.c **** 	plate_rotation_config.Kd = PLATE_ASSER_KD;
  74              		.loc 1 65 0
  75 0044 4FF00003 		mov	r3, #0
  76 0048 7B82     		strh	r3, [r7, #18]	@ movhi
  66:../Krusty/KPlate.c **** 	plate_rotation_config.pos[PLATE_HORIZONTAL_POS_ID] = PLATE_HORIZONTAL_POS;
  77              		.loc 1 66 0
  78 004a 40F2C623 		movw	r3, #710
  79 004e FB80     		strh	r3, [r7, #6]	@ movhi
  67:../Krusty/KPlate.c **** 	plate_rotation_config.pos[PLATE_PREPARE_POS_ID] = PLATE_PREPARE_POS;
  80              		.loc 1 67 0
  81 0050 40F25733 		movw	r3, #855
  82 0054 3B81     		strh	r3, [r7, #8]	@ movhi
  68:../Krusty/KPlate.c **** 	plate_rotation_config.pos[PLATE_VERTICAL_POS_ID] = PLATE_VERTICAL_POS;
  83              		.loc 1 68 0
  84 0056 4FF48263 		mov	r3, #1040
  85 005a 7B81     		strh	r3, [r7, #10]	@ movhi
  69:../Krusty/KPlate.c **** 	plate_rotation_config.pwm_number = PLATE_DCMOTOR_PWM_NUM;
  86              		.loc 1 69 0
  87 005c 4FF00303 		mov	r3, #3
  88 0060 3B71     		strb	r3, [r7, #4]
  70:../Krusty/KPlate.c **** 	plate_rotation_config.way_latch = &PLATE_DCMOTOR_PORT_WAY;
  89              		.loc 1 70 0
  90 0062 40F61403 		movw	r3, #2068
  91 0066 C4F20203 		movt	r3, 16386
  92 006a 7B61     		str	r3, [r7, #20]
  71:../Krusty/KPlate.c **** 	plate_rotation_config.way_bit_number = PLATE_DCMOTOR_PORT_WAY_BIT;
  93              		.loc 1 71 0
  94 006c 4FF00B03 		mov	r3, #11
  95 0070 3B76     		strb	r3, [r7, #24]
  72:../Krusty/KPlate.c **** 	plate_rotation_config.way0_max_duty = PLATE_DCMOTOR_MAX_PWM_WAY0;
  96              		.loc 1 72 0
  97 0072 4FF01E03 		mov	r3, #30
  98 0076 3B73     		strb	r3, [r7, #12]
  73:../Krusty/KPlate.c **** 	plate_rotation_config.way1_max_duty = PLATE_DCMOTOR_MAX_PWM_WAY1;
  99              		.loc 1 73 0
 100 0078 4FF00F03 		mov	r3, #15
 101 007c 7B73     		strb	r3, [r7, #13]
  74:../Krusty/KPlate.c **** 	plate_rotation_config.timeout = PLATE_ASSER_TIMEOUT;
 102              		.loc 1 74 0
 103 007e 4FF4FA63 		mov	r3, #2000
 104 0082 7B83     		strh	r3, [r7, #26]	@ movhi
  75:../Krusty/KPlate.c **** 	plate_rotation_config.epsilon = PLATE_ASSER_POS_EPSILON;
 105              		.loc 1 75 0
 106 0084 4FF03C03 		mov	r3, #60
 107 0088 BB83     		strh	r3, [r7, #28]	@ movhi
  76:../Krusty/KPlate.c **** 	DCM_config(PLATE_DCMOTOR_ID, &plate_rotation_config);
 108              		.loc 1 76 0
 109 008a 3B46     		mov	r3, r7
 110 008c 4FF00100 		mov	r0, #1
 111 0090 1946     		mov	r1, r3
 112 0092 FFF7FEFF 		bl	DCM_config
  77:../Krusty/KPlate.c **** 	DCM_stop(PLATE_DCMOTOR_ID);
 113              		.loc 1 77 0
 114 0096 4FF00100 		mov	r0, #1
 115 009a FFF7FEFF 		bl	DCM_stop
  78:../Krusty/KPlate.c **** 
  79:../Krusty/KPlate.c **** 	info_printf("Pince à assiette initialisé (DCMotor)\n");
 116              		.loc 1 79 0
 117 009e 4FF00400 		mov	r0, #4
 118 00a2 40F20001 		movw	r1, #:lower16:.LC1
 119 00a6 C0F20001 		movt	r1, #:upper16:.LC1
 120 00aa FFF7FEFF 		bl	OUTPUTLOG_printf
  80:../Krusty/KPlate.c **** 
  81:../Krusty/KPlate.c **** 	PLATE_initAX12();
 121              		.loc 1 81 0
 122 00ae 00F005F8 		bl	PLATE_initAX12
 123              	.L1:
  82:../Krusty/KPlate.c **** }
 124              		.loc 1 82 0
 125 00b2 07F12007 		add	r7, r7, #32
 126 00b6 BD46     		mov	sp, r7
 127 00b8 80BD     		pop	{r7, pc}
 128              		.cfi_endproc
 129              	.LFE111:
 131              		.section	.rodata
 132 002b 00       		.align	2
 133              	.LC2:
 134 002c 504C3A20 		.ascii	"PL: Pince AX12 initialis\351\012\000"
 134      50696E63 
 134      65204158 
 134      31322069 
 134      6E697469 
 135              		.text
 136 00ba 00BF     		.align	2
 137              		.thumb
 138              		.thumb_func
 140              	PLATE_initAX12:
 141              	.LFB112:
  83:../Krusty/KPlate.c **** 
  84:../Krusty/KPlate.c **** //Initialise l'AX12 de la pince s'il n'était pas allimenté lors d'initialisations précédentes, si d
  85:../Krusty/KPlate.c **** static void PLATE_initAX12() {
 142              		.loc 1 85 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 00bc 80B5     		push	{r7, lr}
 147              	.LCFI3:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151 00be 00AF     		add	r7, sp, #0
 152              	.LCFI4:
 153              		.cfi_def_cfa_register 7
  86:../Krusty/KPlate.c **** 	static bool_e ax12_is_initialized = FALSE;
  87:../Krusty/KPlate.c **** 	if(ax12_is_initialized == FALSE && AX12_is_ready(PLATE_PLIER_AX12_ID) == TRUE) {
 154              		.loc 1 87 0
 155 00c0 40F20003 		movw	r3, #:lower16:ax12_is_initialized.6452
 156 00c4 C0F20003 		movt	r3, #:upper16:ax12_is_initialized.6452
 157 00c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 158 00ca 002B     		cmp	r3, #0
 159 00cc 45D1     		bne	.L4
 160              		.loc 1 87 0 is_stmt 0 discriminator 1
 161 00ce 4FF00300 		mov	r0, #3
 162 00d2 FFF7FEFF 		bl	AX12_is_ready
 163 00d6 0346     		mov	r3, r0
 164 00d8 012B     		cmp	r3, #1
 165 00da 3ED1     		bne	.L4
  88:../Krusty/KPlate.c **** 		ax12_is_initialized = TRUE;
 166              		.loc 1 88 0 is_stmt 1
 167 00dc 40F20003 		movw	r3, #:lower16:ax12_is_initialized.6452
 168 00e0 C0F20003 		movt	r3, #:upper16:ax12_is_initialized.6452
 169 00e4 4FF00102 		mov	r2, #1
 170 00e8 1A70     		strb	r2, [r3, #0]
  89:../Krusty/KPlate.c **** 		AX12_config_set_highest_voltage(PLATE_PLIER_AX12_ID, 136);
 171              		.loc 1 89 0
 172 00ea 4FF00300 		mov	r0, #3
 173 00ee 4FF08801 		mov	r1, #136
 174 00f2 FFF7FEFF 		bl	AX12_config_set_highest_voltage
  90:../Krusty/KPlate.c **** 		AX12_config_set_lowest_voltage(PLATE_PLIER_AX12_ID, 70);
 175              		.loc 1 90 0
 176 00f6 4FF00300 		mov	r0, #3
 177 00fa 4FF04601 		mov	r1, #70
 178 00fe FFF7FEFF 		bl	AX12_config_set_lowest_voltage
  91:../Krusty/KPlate.c **** 		AX12_config_set_maximum_torque_percentage(PLATE_PLIER_AX12_ID, PLATE_PLIER_AX12_MAX_TORQUE_PERCEN
 179              		.loc 1 91 0
 180 0102 4FF00300 		mov	r0, #3
 181 0106 4FF03201 		mov	r1, #50
 182 010a FFF7FEFF 		bl	AX12_config_set_maximum_torque_percentage
  92:../Krusty/KPlate.c **** 
  93:../Krusty/KPlate.c **** 		AX12_config_set_maximal_angle(PLATE_PLIER_AX12_ID, 300);
 183              		.loc 1 93 0
 184 010e 4FF00300 		mov	r0, #3
 185 0112 4FF49671 		mov	r1, #300
 186 0116 FFF7FEFF 		bl	AX12_config_set_maximal_angle
  94:../Krusty/KPlate.c **** 		AX12_config_set_minimal_angle(PLATE_PLIER_AX12_ID, 0);
 187              		.loc 1 94 0
 188 011a 4FF00300 		mov	r0, #3
 189 011e 4FF00001 		mov	r1, #0
 190 0122 FFF7FEFF 		bl	AX12_config_set_minimal_angle
  95:../Krusty/KPlate.c **** 
  96:../Krusty/KPlate.c **** 		AX12_config_set_error_before_led(PLATE_PLIER_AX12_ID, AX12_ERROR_ANGLE | AX12_ERROR_CHECKSUM | AX
 191              		.loc 1 96 0
 192 0126 4FF00300 		mov	r0, #3
 193 012a 4FF07E01 		mov	r1, #126
 194 012e FFF7FEFF 		bl	AX12_config_set_error_before_led
  97:../Krusty/KPlate.c **** 		AX12_config_set_error_before_shutdown(PLATE_PLIER_AX12_ID, AX12_ERROR_OVERHEATING); //On ne met p
 195              		.loc 1 97 0
 196 0132 4FF00300 		mov	r0, #3
 197 0136 4FF00401 		mov	r1, #4
 198 013a FFF7FEFF 		bl	AX12_config_set_error_before_shutdown
  98:../Krusty/KPlate.c **** 
  99:../Krusty/KPlate.c **** 		AX12_set_position(PLATE_PLIER_AX12_ID, PLATE_ACT_PLIER_AX12_INIT_POS);
 199              		.loc 1 99 0
 200 013e 4FF00300 		mov	r0, #3
 201 0142 4FF0C801 		mov	r1, #200
 202 0146 FFF7FEFF 		bl	AX12_set_position
 100:../Krusty/KPlate.c **** 		info_printf("Pince AX12 initialisé\n");
 203              		.loc 1 100 0
 204 014a 4FF00400 		mov	r0, #4
 205 014e 40F20001 		movw	r1, #:lower16:.LC2
 206 0152 C0F20001 		movt	r1, #:upper16:.LC2
 207 0156 FFF7FEFF 		bl	OUTPUTLOG_printf
 208              	.L4:
 101:../Krusty/KPlate.c **** 	}
 102:../Krusty/KPlate.c **** }
 209              		.loc 1 102 0
 210 015a 80BD     		pop	{r7, pc}
 211              		.cfi_endproc
 212              	.LFE112:
 214              		.align	2
 215              		.global	PLATE_stop
 216              		.thumb
 217              		.thumb_func
 219              	PLATE_stop:
 220              	.LFB113:
 103:../Krusty/KPlate.c **** 
 104:../Krusty/KPlate.c **** void PLATE_stop() {
 221              		.loc 1 104 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 1, uses_anonymous_args = 0
 225 015c 80B5     		push	{r7, lr}
 226              	.LCFI5:
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 015e 00AF     		add	r7, sp, #0
 231              	.LCFI6:
 232              		.cfi_def_cfa_register 7
 105:../Krusty/KPlate.c **** 	DCM_stop(PLATE_DCMOTOR_ID);
 233              		.loc 1 105 0
 234 0160 4FF00100 		mov	r0, #1
 235 0164 FFF7FEFF 		bl	DCM_stop
 106:../Krusty/KPlate.c **** }
 236              		.loc 1 106 0
 237 0168 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE113:
 241              		.section	.rodata
 242 0047 00       		.align	2
 243              	.LC3:
 244 0048 504C3A20 		.ascii	"PL: invalid CAN msg data[0]=%u !\012\000"
 244      696E7661 
 244      6C696420 
 244      43414E20 
 244      6D736720 
 245 006a 0000     		.align	2
 246              	.LC0:
 247 006c 10       		.byte	16
 248 006d 00       		.space	1
 249 006e 0000     		.short	0
 250 0070 00000000 		.word	ACTQ_finish_SendResultIfFail
 251              		.text
 252 016a 00BF     		.align	2
 253              		.global	PLATE_CAN_process_msg
 254              		.thumb
 255              		.thumb_func
 257              	PLATE_CAN_process_msg:
 258              	.LFB114:
 107:../Krusty/KPlate.c **** 
 108:../Krusty/KPlate.c **** bool_e PLATE_CAN_process_msg(CAN_msg_t* msg) {
 259              		.loc 1 108 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 64
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 016c 80B5     		push	{r7, lr}
 264              	.LCFI7:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 016e 92B0     		sub	sp, sp, #72
 269              	.LCFI8:
 270              		.cfi_def_cfa_offset 80
 271 0170 02AF     		add	r7, sp, #8
 272              	.LCFI9:
 273              		.cfi_def_cfa 7, 72
 274 0172 7860     		str	r0, [r7, #4]
 109:../Krusty/KPlate.c **** 	queue_id_t queueId;
 110:../Krusty/KPlate.c **** 
 111:../Krusty/KPlate.c **** 	if(msg->sid == ACT_PLATE) {
 275              		.loc 1 111 0
 276 0174 7B68     		ldr	r3, [r7, #4]
 277 0176 1A88     		ldrh	r2, [r3, #0]
 278 0178 40F21233 		movw	r3, #786
 279 017c 9A42     		cmp	r2, r3
 280 017e 40F0F680 		bne	.L8
 112:../Krusty/KPlate.c **** 		//Initialise l'AX12 de la pince s'il n'était pas allimenté lors d'initialisations précédentes, si
 113:../Krusty/KPlate.c **** 		PLATE_initAX12();
 281              		.loc 1 113 0
 282 0182 FFF79BFF 		bl	PLATE_initAX12
 114:../Krusty/KPlate.c **** 
 115:../Krusty/KPlate.c **** 		switch(msg->data[0]) {
 283              		.loc 1 115 0
 284 0186 7B68     		ldr	r3, [r7, #4]
 285 0188 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 286 018a A3F11003 		sub	r3, r3, #16
 287 018e 1F2B     		cmp	r3, #31
 288 0190 00F2DF80 		bhi	.L9
 289 0194 4FF00102 		mov	r2, #1
 290 0198 02FA03F2 		lsl	r2, r2, r3
 291 019c 4FF00003 		mov	r3, #0
 292 01a0 C8F20303 		movt	r3, 32771
 293 01a4 1340     		ands	r3, r3, r2
 294 01a6 002B     		cmp	r3, #0
 295 01a8 0AD1     		bne	.L11
 296 01aa 48F20303 		movw	r3, #32771
 297 01ae 1340     		ands	r3, r3, r2
 298 01b0 002B     		cmp	r3, #0
 299 01b2 40F0C280 		bne	.L10
 300 01b6 02F48023 		and	r3, r2, #262144
 301 01ba 002B     		cmp	r3, #0
 302 01bc 0CD1     		bne	.L12
 303 01be C8E0     		b	.L9
 304              	.L11:
 116:../Krusty/KPlate.c **** 			case ACT_PLATE_ROTATE_HORIZONTALLY:
 117:../Krusty/KPlate.c **** 			case ACT_PLATE_ROTATE_PREPARE:
 118:../Krusty/KPlate.c **** 			case ACT_PLATE_ROTATE_STOP:
 119:../Krusty/KPlate.c **** 			//case ACT_PLATE_ROTATE_VERTICALLY:
 120:../Krusty/KPlate.c **** 				ACTQ_push_operation_from_msg(msg, QUEUE_ACT_Plate_Rotation, &PLATE_run_command, 0);
 305              		.loc 1 120 0
 306 01c0 7868     		ldr	r0, [r7, #4]
 307 01c2 4FF00101 		mov	r1, #1
 308 01c6 40F20002 		movw	r2, #:lower16:PLATE_run_command
 309 01ca C0F20002 		movt	r2, #:upper16:PLATE_run_command
 310 01ce 4FF00003 		mov	r3, #0
 311 01d2 FFF7FEFF 		bl	ACTQ_push_operation_from_msg
 121:../Krusty/KPlate.c **** 				break;
 312              		.loc 1 121 0
 313 01d6 C7E0     		b	.L13
 314              	.L12:
 122:../Krusty/KPlate.c **** 
 123:../Krusty/KPlate.c **** 			case ACT_PLATE_ROTATE_VERTICALLY:    //Cas spécial: fermer la pince avant de tourner en vertical
 124:../Krusty/KPlate.c **** 				queueId = QUEUE_create();
 315              		.loc 1 124 0
 316 01d8 FFF7FEFF 		bl	QUEUE_create
 317 01dc 0346     		mov	r3, r0
 318 01de 87F83F30 		strb	r3, [r7, #63]
 125:../Krusty/KPlate.c **** 				assert(queueId != QUEUE_CREATE_FAILED);
 126:../Krusty/KPlate.c **** 				if(queueId != QUEUE_CREATE_FAILED) {
 319              		.loc 1 126 0
 320 01e2 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 321 01e6 FF2B     		cmp	r3, #255
 322 01e8 00F09780 		beq	.L14
 127:../Krusty/KPlate.c **** 					QUEUE_add(queueId, &QUEUE_take_sem, (QUEUE_arg_t){0, 0, NULL}, QUEUE_ACT_Plate_AX12_Plier);
 323              		.loc 1 127 0
 324 01ec 4FF00003 		mov	r3, #0
 325 01f0 3B73     		strb	r3, [r7, #12]
 326 01f2 4FF00003 		mov	r3, #0
 327 01f6 FB81     		strh	r3, [r7, #14]	@ movhi
 328 01f8 4FF00003 		mov	r3, #0
 329 01fc 3B61     		str	r3, [r7, #16]
 330 01fe 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 331 0202 4FF00202 		mov	r2, #2
 332 0206 0092     		str	r2, [sp, #0]
 333 0208 1846     		mov	r0, r3
 334 020a 40F20001 		movw	r1, #:lower16:QUEUE_take_sem
 335 020e C0F20001 		movt	r1, #:upper16:QUEUE_take_sem
 336 0212 07F10C03 		add	r3, r7, #12
 337 0216 0CCB     		ldmia	r3, {r2, r3}
 338 0218 FFF7FEFF 		bl	QUEUE_add
 128:../Krusty/KPlate.c **** 					QUEUE_add(queueId, &QUEUE_take_sem, (QUEUE_arg_t){0, 0, NULL}, QUEUE_ACT_Plate_Rotation);
 339              		.loc 1 128 0
 340 021c 4FF00003 		mov	r3, #0
 341 0220 3B75     		strb	r3, [r7, #20]
 342 0222 4FF00003 		mov	r3, #0
 343 0226 FB82     		strh	r3, [r7, #22]	@ movhi
 344 0228 4FF00003 		mov	r3, #0
 345 022c BB61     		str	r3, [r7, #24]
 346 022e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 347 0232 4FF00102 		mov	r2, #1
 348 0236 0092     		str	r2, [sp, #0]
 349 0238 1846     		mov	r0, r3
 350 023a 40F20001 		movw	r1, #:lower16:QUEUE_take_sem
 351 023e C0F20001 		movt	r1, #:upper16:QUEUE_take_sem
 352 0242 07F11403 		add	r3, r7, #20
 353 0246 0CCB     		ldmia	r3, {r2, r3}
 354 0248 FFF7FEFF 		bl	QUEUE_add
 129:../Krusty/KPlate.c **** 					QUEUE_add(queueId, &PLATE_run_command, (QUEUE_arg_t){ACT_PLATE_PLIER_CLOSE, 0, &ACTQ_finish_Se
 355              		.loc 1 129 0
 356 024c 40F20003 		movw	r3, #:lower16:.LC0
 357 0250 C0F20003 		movt	r3, #:upper16:.LC0
 358 0254 07F11C02 		add	r2, r7, #28
 359 0258 93E80300 		ldmia	r3, {r0, r1}
 360 025c 82E80300 		stmia	r2, {r0, r1}
 361 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 362 0264 4FF00202 		mov	r2, #2
 363 0268 0092     		str	r2, [sp, #0]
 364 026a 1846     		mov	r0, r3
 365 026c 40F20001 		movw	r1, #:lower16:PLATE_run_command
 366 0270 C0F20001 		movt	r1, #:upper16:PLATE_run_command
 367 0274 07F11C03 		add	r3, r7, #28
 368 0278 0CCB     		ldmia	r3, {r2, r3}
 369 027a FFF7FEFF 		bl	QUEUE_add
 130:../Krusty/KPlate.c **** 					QUEUE_add(queueId, &PLATE_run_command, (QUEUE_arg_t){msg->data[0]         , 0, &ACTQ_finish_Se
 370              		.loc 1 130 0
 371 027e 7B68     		ldr	r3, [r7, #4]
 372 0280 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 373 0282 87F82430 		strb	r3, [r7, #36]
 374 0286 4FF00003 		mov	r3, #0
 375 028a FB84     		strh	r3, [r7, #38]	@ movhi
 376 028c 40F20003 		movw	r3, #:lower16:ACTQ_finish_SendResult
 377 0290 C0F20003 		movt	r3, #:upper16:ACTQ_finish_SendResult
 378 0294 BB62     		str	r3, [r7, #40]
 379 0296 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 380 029a 4FF00102 		mov	r2, #1
 381 029e 0092     		str	r2, [sp, #0]
 382 02a0 1846     		mov	r0, r3
 383 02a2 40F20001 		movw	r1, #:lower16:PLATE_run_command
 384 02a6 C0F20001 		movt	r1, #:upper16:PLATE_run_command
 385 02aa 07F12403 		add	r3, r7, #36
 386 02ae 0CCB     		ldmia	r3, {r2, r3}
 387 02b0 FFF7FEFF 		bl	QUEUE_add
 131:../Krusty/KPlate.c **** 					QUEUE_add(queueId, &QUEUE_give_sem, (QUEUE_arg_t){0, 0, NULL}, QUEUE_ACT_Plate_Rotation);
 388              		.loc 1 131 0
 389 02b4 4FF00003 		mov	r3, #0
 390 02b8 87F82C30 		strb	r3, [r7, #44]
 391 02bc 4FF00003 		mov	r3, #0
 392 02c0 FB85     		strh	r3, [r7, #46]	@ movhi
 393 02c2 4FF00003 		mov	r3, #0
 394 02c6 3B63     		str	r3, [r7, #48]
 395 02c8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 396 02cc 4FF00102 		mov	r2, #1
 397 02d0 0092     		str	r2, [sp, #0]
 398 02d2 1846     		mov	r0, r3
 399 02d4 40F20001 		movw	r1, #:lower16:QUEUE_give_sem
 400 02d8 C0F20001 		movt	r1, #:upper16:QUEUE_give_sem
 401 02dc 07F12C03 		add	r3, r7, #44
 402 02e0 0CCB     		ldmia	r3, {r2, r3}
 403 02e2 FFF7FEFF 		bl	QUEUE_add
 132:../Krusty/KPlate.c **** 					QUEUE_add(queueId, &QUEUE_give_sem, (QUEUE_arg_t){0, 0, NULL}, QUEUE_ACT_Plate_AX12_Plier);
 404              		.loc 1 132 0
 405 02e6 4FF00003 		mov	r3, #0
 406 02ea 87F83430 		strb	r3, [r7, #52]
 407 02ee 4FF00003 		mov	r3, #0
 408 02f2 FB86     		strh	r3, [r7, #54]	@ movhi
 409 02f4 4FF00003 		mov	r3, #0
 410 02f8 BB63     		str	r3, [r7, #56]
 411 02fa 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 412 02fe 4FF00202 		mov	r2, #2
 413 0302 0092     		str	r2, [sp, #0]
 414 0304 1846     		mov	r0, r3
 415 0306 40F20001 		movw	r1, #:lower16:QUEUE_give_sem
 416 030a C0F20001 		movt	r1, #:upper16:QUEUE_give_sem
 417 030e 07F13403 		add	r3, r7, #52
 418 0312 0CCB     		ldmia	r3, {r2, r3}
 419 0314 FFF7FEFF 		bl	QUEUE_add
 133:../Krusty/KPlate.c **** 				} else {	//on indique qu'on a pas géré la commande
 134:../Krusty/KPlate.c **** 					ACTQ_sendResultWithLine(msg->sid, msg->data[0], ACT_RESULT_NOT_HANDLED, ACT_RESULT_ERROR_NO_RE
 135:../Krusty/KPlate.c **** 				}
 136:../Krusty/KPlate.c **** 				break;
 420              		.loc 1 136 0
 421 0318 26E0     		b	.L13
 422              	.L14:
 134:../Krusty/KPlate.c **** 					ACTQ_sendResultWithLine(msg->sid, msg->data[0], ACT_RESULT_NOT_HANDLED, ACT_RESULT_ERROR_NO_RE
 423              		.loc 1 134 0
 424 031a 7B68     		ldr	r3, [r7, #4]
 425 031c 1A88     		ldrh	r2, [r3, #0]
 426 031e 7B68     		ldr	r3, [r7, #4]
 427 0320 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 428 0322 4FF08601 		mov	r1, #134
 429 0326 0091     		str	r1, [sp, #0]
 430 0328 1046     		mov	r0, r2
 431 032a 1946     		mov	r1, r3
 432 032c 4FF00202 		mov	r2, #2
 433 0330 4FF00503 		mov	r3, #5
 434 0334 FFF7FEFF 		bl	ACTQ_sendResultWitExplicitLine
 435              		.loc 1 136 0
 436 0338 16E0     		b	.L13
 437              	.L10:
 137:../Krusty/KPlate.c **** 
 138:../Krusty/KPlate.c **** 			case ACT_PLATE_PLIER_CLOSE:
 139:../Krusty/KPlate.c **** 			case ACT_PLATE_PLIER_OPEN:
 140:../Krusty/KPlate.c **** 			case ACT_PLATE_PLIER_STOP:
 141:../Krusty/KPlate.c **** 				ACTQ_push_operation_from_msg(msg, QUEUE_ACT_Plate_AX12_Plier, &PLATE_run_command, 0);
 438              		.loc 1 141 0
 439 033a 7868     		ldr	r0, [r7, #4]
 440 033c 4FF00201 		mov	r1, #2
 441 0340 40F20002 		movw	r2, #:lower16:PLATE_run_command
 442 0344 C0F20002 		movt	r2, #:upper16:PLATE_run_command
 443 0348 4FF00003 		mov	r3, #0
 444 034c FFF7FEFF 		bl	ACTQ_push_operation_from_msg
 142:../Krusty/KPlate.c **** 				break;
 445              		.loc 1 142 0
 446 0350 0AE0     		b	.L13
 447              	.L9:
 143:../Krusty/KPlate.c **** 
 144:../Krusty/KPlate.c **** 			default:
 145:../Krusty/KPlate.c **** 				warn_printf("invalid CAN msg data[0]=%u !\n", msg->data[0]);
 448              		.loc 1 145 0
 449 0352 7B68     		ldr	r3, [r7, #4]
 450 0354 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 451 0356 4FF00300 		mov	r0, #3
 452 035a 40F20001 		movw	r1, #:lower16:.LC3
 453 035e C0F20001 		movt	r1, #:upper16:.LC3
 454 0362 1A46     		mov	r2, r3
 455 0364 FFF7FEFF 		bl	OUTPUTLOG_printf
 456              	.L13:
 146:../Krusty/KPlate.c **** 		}
 147:../Krusty/KPlate.c **** 		return TRUE;
 457              		.loc 1 147 0
 458 0368 4FF00103 		mov	r3, #1
 459 036c 01E0     		b	.L16
 460              	.L8:
 148:../Krusty/KPlate.c **** 	}
 149:../Krusty/KPlate.c **** 
 150:../Krusty/KPlate.c **** 	return FALSE;
 461              		.loc 1 150 0
 462 036e 4FF00003 		mov	r3, #0
 463              	.L16:
 151:../Krusty/KPlate.c **** }
 464              		.loc 1 151 0
 465 0372 1846     		mov	r0, r3
 466 0374 07F14007 		add	r7, r7, #64
 467 0378 BD46     		mov	sp, r7
 468 037a 80BD     		pop	{r7, pc}
 469              		.cfi_endproc
 470              	.LFE114:
 472              		.align	2
 473              		.thumb
 474              		.thumb_func
 476              	PLATE_getRotationAngle:
 477              	.LFB115:
 152:../Krusty/KPlate.c **** 
 153:../Krusty/KPlate.c **** static Sint16 PLATE_getRotationAngle() {
 478              		.loc 1 153 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 037c 80B5     		push	{r7, lr}
 483              	.LCFI10:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 037e 00AF     		add	r7, sp, #0
 488              	.LCFI11:
 489              		.cfi_def_cfa_register 7
 154:../Krusty/KPlate.c **** 	return ADC_getValue(PLATE_ROTATION_POTAR_ADC_ID);
 490              		.loc 1 154 0
 491 0380 4FF00200 		mov	r0, #2
 492 0384 FFF7FEFF 		bl	ADC_getValue
 493 0388 0346     		mov	r3, r0
 155:../Krusty/KPlate.c **** }
 494              		.loc 1 155 0
 495 038a 1846     		mov	r0, r3
 496 038c 80BD     		pop	{r7, pc}
 497              		.cfi_endproc
 498              	.LFE115:
 500 038e 00BF     		.align	2
 501              		.global	PLATE_run_command
 502              		.thumb
 503              		.thumb_func
 505              	PLATE_run_command:
 506              	.LFB116:
 156:../Krusty/KPlate.c **** 
 157:../Krusty/KPlate.c **** void PLATE_run_command(queue_id_t queueId, bool_e init) {
 507              		.loc 1 157 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 8
 510              		@ frame_needed = 1, uses_anonymous_args = 0
 511 0390 80B5     		push	{r7, lr}
 512              	.LCFI12:
 513              		.cfi_def_cfa_offset 8
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0392 82B0     		sub	sp, sp, #8
 517              	.LCFI13:
 518              		.cfi_def_cfa_offset 16
 519 0394 00AF     		add	r7, sp, #0
 520              	.LCFI14:
 521              		.cfi_def_cfa_register 7
 522 0396 0246     		mov	r2, r0
 523 0398 0B46     		mov	r3, r1
 524 039a FA71     		strb	r2, [r7, #7]
 525 039c BB71     		strb	r3, [r7, #6]
 158:../Krusty/KPlate.c **** 	if(QUEUE_has_error(queueId)) {
 526              		.loc 1 158 0
 527 039e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 528 03a0 1846     		mov	r0, r3
 529 03a2 FFF7FEFF 		bl	QUEUE_has_error
 530 03a6 0346     		mov	r3, r0
 531 03a8 002B     		cmp	r3, #0
 532 03aa 04D0     		beq	.L20
 159:../Krusty/KPlate.c **** 		QUEUE_behead(queueId);
 533              		.loc 1 159 0
 534 03ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 535 03ae 1846     		mov	r0, r3
 536 03b0 FFF7FEFF 		bl	QUEUE_behead
 160:../Krusty/KPlate.c **** 		return;
 537              		.loc 1 160 0
 538 03b4 26E0     		b	.L19
 539              	.L20:
 161:../Krusty/KPlate.c **** 	}
 162:../Krusty/KPlate.c **** 
 163:../Krusty/KPlate.c **** 	if(QUEUE_get_act(queueId) == QUEUE_ACT_Plate_Rotation) {    // Gestion des mouvements de rotation 
 540              		.loc 1 163 0
 541 03b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 542 03b8 1846     		mov	r0, r3
 543 03ba FFF7FEFF 		bl	QUEUE_get_act
 544 03be 0346     		mov	r3, r0
 545 03c0 012B     		cmp	r3, #1
 546 03c2 0CD1     		bne	.L22
 164:../Krusty/KPlate.c **** 		if(init)
 547              		.loc 1 164 0
 548 03c4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 549 03c6 002B     		cmp	r3, #0
 550 03c8 04D0     		beq	.L23
 165:../Krusty/KPlate.c **** 			PLATE_rotation_command_init(queueId);
 551              		.loc 1 165 0
 552 03ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 553 03cc 1846     		mov	r0, r3
 554 03ce 00F01DF8 		bl	PLATE_rotation_command_init
 555 03d2 17E0     		b	.L19
 556              	.L23:
 166:../Krusty/KPlate.c **** 		else
 167:../Krusty/KPlate.c **** 			PLATE_rotation_command_run(queueId);
 557              		.loc 1 167 0
 558 03d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 559 03d6 1846     		mov	r0, r3
 560 03d8 00F0B2F8 		bl	PLATE_rotation_command_run
 561 03dc 12E0     		b	.L19
 562              	.L22:
 168:../Krusty/KPlate.c **** 	} else if(QUEUE_get_act(queueId) == QUEUE_ACT_Plate_AX12_Plier) {    // Gestion des mouvements de 
 563              		.loc 1 168 0
 564 03de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 565 03e0 1846     		mov	r0, r3
 566 03e2 FFF7FEFF 		bl	QUEUE_get_act
 567 03e6 0346     		mov	r3, r0
 568 03e8 022B     		cmp	r3, #2
 569 03ea 0BD1     		bne	.L19
 169:../Krusty/KPlate.c **** 		if(init)
 570              		.loc 1 169 0
 571 03ec BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 572 03ee 002B     		cmp	r3, #0
 573 03f0 04D0     		beq	.L24
 170:../Krusty/KPlate.c **** 			PLATE_plier_command_init(queueId);
 574              		.loc 1 170 0
 575 03f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 576 03f4 1846     		mov	r0, r3
 577 03f6 00F0D5F8 		bl	PLATE_plier_command_init
 578 03fa 03E0     		b	.L19
 579              	.L24:
 171:../Krusty/KPlate.c **** 		else
 172:../Krusty/KPlate.c **** 			PLATE_plier_command_run(queueId);
 580              		.loc 1 172 0
 581 03fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 582 03fe 1846     		mov	r0, r3
 583 0400 00F084F9 		bl	PLATE_plier_command_run
 584              	.L19:
 173:../Krusty/KPlate.c **** 	}
 174:../Krusty/KPlate.c **** }
 585              		.loc 1 174 0
 586 0404 07F10807 		add	r7, r7, #8
 587 0408 BD46     		mov	sp, r7
 588 040a 80BD     		pop	{r7, pc}
 589              		.cfi_endproc
 590              	.LFE116:
 592              		.section	.rodata
 593              		.align	2
 594              	.LC4:
 595 0074 504C3A20 		.ascii	"PL: Invalid rotation command: %u, code is broken !\012"
 595      496E7661 
 595      6C696420 
 595      726F7461 
 595      74696F6E 
 596 00a7 00       		.ascii	"\000"
 597              		.align	2
 598              	.LC5:
 599 00a8 504C3A20 		.ascii	"PL: Rotation at position %d\012\000"
 599      526F7461 
 599      74696F6E 
 599      20617420 
 599      706F7369 
 600              		.text
 601              		.align	2
 602              		.thumb
 603              		.thumb_func
 605              	PLATE_rotation_command_init:
 606              	.LFB117:
 175:../Krusty/KPlate.c **** 
 176:../Krusty/KPlate.c **** //Initialisation d'une commande de rotation du bras
 177:../Krusty/KPlate.c **** static void PLATE_rotation_command_init(queue_id_t queueId) {
 607              		.loc 1 177 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 16
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 040c 80B5     		push	{r7, lr}
 612              	.LCFI15:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 040e 86B0     		sub	sp, sp, #24
 617              	.LCFI16:
 618              		.cfi_def_cfa_offset 32
 619 0410 02AF     		add	r7, sp, #8
 620              	.LCFI17:
 621              		.cfi_def_cfa 7, 24
 622 0412 0346     		mov	r3, r0
 623 0414 FB71     		strb	r3, [r7, #7]
 178:../Krusty/KPlate.c **** 	Uint8 wantedPosition;
 179:../Krusty/KPlate.c **** 	Uint8 command = QUEUE_get_arg(queueId)->canCommand;
 624              		.loc 1 179 0
 625 0416 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 626 0418 1846     		mov	r0, r3
 627 041a FFF7FEFF 		bl	QUEUE_get_arg
 628 041e 0346     		mov	r3, r0
 629 0420 1B78     		ldrb	r3, [r3, #0]
 630 0422 BB73     		strb	r3, [r7, #14]
 180:../Krusty/KPlate.c **** 	switch(command) {
 631              		.loc 1 180 0
 632 0424 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 633 0426 A3F12003 		sub	r3, r3, #32
 634 042a 0F2B     		cmp	r3, #15
 635 042c 51D8     		bhi	.L26
 636 042e 01A2     		adr	r2, .L31
 637 0430 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 638              		.align	2
 639              	.L31:
 640 0434 75040000 		.word	.L27+1
 641 0438 91040000 		.word	.L28+1
 642 043c AD040000 		.word	.L29+1
 643 0440 D3040000 		.word	.L26+1
 644 0444 D3040000 		.word	.L26+1
 645 0448 D3040000 		.word	.L26+1
 646 044c D3040000 		.word	.L26+1
 647 0450 D3040000 		.word	.L26+1
 648 0454 D3040000 		.word	.L26+1
 649 0458 D3040000 		.word	.L26+1
 650 045c D3040000 		.word	.L26+1
 651 0460 D3040000 		.word	.L26+1
 652 0464 D3040000 		.word	.L26+1
 653 0468 D3040000 		.word	.L26+1
 654 046c D3040000 		.word	.L26+1
 655 0470 C9040000 		.word	.L30+1
 656              	.L27:
 181:../Krusty/KPlate.c **** 		case ACT_PLATE_ROTATE_HORIZONTALLY:
 182:../Krusty/KPlate.c **** 			wantedPosition = PLATE_HORIZONTAL_POS_ID;
 657              		.loc 1 182 0
 658 0474 4FF00003 		mov	r3, #0
 659 0478 FB73     		strb	r3, [r7, #15]
 183:../Krusty/KPlate.c **** 			//Coefs différents pour la descente car on sinon on tape trop fort le sol a cause du poids de l'
 184:../Krusty/KPlate.c **** 			DCM_setCoefs(PLATE_DCMOTOR_ID, PLATE_ASSER_AMORTIZED_KP, PLATE_ASSER_AMORTIZED_KI, PLATE_ASSER_A
 660              		.loc 1 184 0
 661 047a 4FF00100 		mov	r0, #1
 662 047e 4FF4C871 		mov	r1, #400
 663 0482 4FF00002 		mov	r2, #0
 664 0486 44F62063 		movw	r3, #20000
 665 048a FFF7FEFF 		bl	DCM_setCoefs
 185:../Krusty/KPlate.c **** 			break;
 666              		.loc 1 185 0
 667 048e 38E0     		b	.L32
 668              	.L28:
 186:../Krusty/KPlate.c **** 
 187:../Krusty/KPlate.c **** 		case ACT_PLATE_ROTATE_PREPARE:
 188:../Krusty/KPlate.c **** 			wantedPosition = PLATE_PREPARE_POS_ID;
 669              		.loc 1 188 0
 670 0490 4FF00103 		mov	r3, #1
 671 0494 FB73     		strb	r3, [r7, #15]
 189:../Krusty/KPlate.c **** 			DCM_setCoefs(PLATE_DCMOTOR_ID, PLATE_ASSER_KP, PLATE_ASSER_KI, PLATE_ASSER_KD);
 672              		.loc 1 189 0
 673 0496 4FF00100 		mov	r0, #1
 674 049a 4FF4C871 		mov	r1, #400
 675 049e 4FF00002 		mov	r2, #0
 676 04a2 4FF00003 		mov	r3, #0
 677 04a6 FFF7FEFF 		bl	DCM_setCoefs
 190:../Krusty/KPlate.c **** 			break;
 678              		.loc 1 190 0
 679 04aa 2AE0     		b	.L32
 680              	.L29:
 191:../Krusty/KPlate.c **** 
 192:../Krusty/KPlate.c **** 		case ACT_PLATE_ROTATE_VERTICALLY:
 193:../Krusty/KPlate.c **** 			wantedPosition = PLATE_VERTICAL_POS_ID;
 681              		.loc 1 193 0
 682 04ac 4FF00203 		mov	r3, #2
 683 04b0 FB73     		strb	r3, [r7, #15]
 194:../Krusty/KPlate.c **** 			DCM_setCoefs(PLATE_DCMOTOR_ID, PLATE_ASSER_KP, PLATE_ASSER_KI, PLATE_ASSER_KD);
 684              		.loc 1 194 0
 685 04b2 4FF00100 		mov	r0, #1
 686 04b6 4FF4C871 		mov	r1, #400
 687 04ba 4FF00002 		mov	r2, #0
 688 04be 4FF00003 		mov	r3, #0
 689 04c2 FFF7FEFF 		bl	DCM_setCoefs
 195:../Krusty/KPlate.c **** 			break;
 690              		.loc 1 195 0
 691 04c6 1CE0     		b	.L32
 692              	.L30:
 196:../Krusty/KPlate.c **** 
 197:../Krusty/KPlate.c **** 		case ACT_PLATE_ROTATE_STOP:
 198:../Krusty/KPlate.c **** 			DCM_stop(PLATE_DCMOTOR_ID);
 693              		.loc 1 198 0
 694 04c8 4FF00100 		mov	r0, #1
 695 04cc FFF7FEFF 		bl	DCM_stop
 199:../Krusty/KPlate.c **** 			//Le moteur atteindra l'état IDLE automatiquement et le message de retour sera envoyé, voir PLAT
 200:../Krusty/KPlate.c **** 			return;
 696              		.loc 1 200 0
 697 04d0 31E0     		b	.L25
 698              	.L26:
 201:../Krusty/KPlate.c **** 
 202:../Krusty/KPlate.c **** 		default: {
 203:../Krusty/KPlate.c **** 				error_printf("Invalid rotation command: %u, code is broken !\n", command);
 699              		.loc 1 203 0
 700 04d2 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 701 04d4 4FF00200 		mov	r0, #2
 702 04d8 40F20001 		movw	r1, #:lower16:.LC4
 703 04dc C0F20001 		movt	r1, #:upper16:.LC4
 704 04e0 1A46     		mov	r2, r3
 705 04e2 FFF7FEFF 		bl	OUTPUTLOG_printf
 204:../Krusty/KPlate.c **** 				QUEUE_next(queueId, ACT_PLATE, ACT_RESULT_NOT_HANDLED, ACT_RESULT_ERROR_LOGIC, __LINE__);
 706              		.loc 1 204 0
 707 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 708 04e8 4FF0CC02 		mov	r2, #204
 709 04ec 0092     		str	r2, [sp, #0]
 710 04ee 1846     		mov	r0, r3
 711 04f0 40F21231 		movw	r1, #786
 712 04f4 4FF00202 		mov	r2, #2
 713 04f8 4FF00403 		mov	r3, #4
 714 04fc FFF7FEFF 		bl	QUEUE_next
 205:../Krusty/KPlate.c **** 				return;
 715              		.loc 1 205 0
 716 0500 19E0     		b	.L25
 717              	.L32:
 206:../Krusty/KPlate.c **** 			}
 207:../Krusty/KPlate.c **** 	}
 208:../Krusty/KPlate.c **** 	debug_printf("Rotation at position %d\n", DCM_getPosValue(PLATE_DCMOTOR_ID, wantedPosition));
 718              		.loc 1 208 0
 719 0502 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 720 0504 4FF00100 		mov	r0, #1
 721 0508 1946     		mov	r1, r3
 722 050a FFF7FEFF 		bl	DCM_getPosValue
 723 050e 0346     		mov	r3, r0
 724 0510 4FF00500 		mov	r0, #5
 725 0514 40F20001 		movw	r1, #:lower16:.LC5
 726 0518 C0F20001 		movt	r1, #:upper16:.LC5
 727 051c 1A46     		mov	r2, r3
 728 051e FFF7FEFF 		bl	OUTPUTLOG_printf
 209:../Krusty/KPlate.c **** 	DCM_goToPos(PLATE_DCMOTOR_ID, wantedPosition);
 729              		.loc 1 209 0
 730 0522 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 731 0524 4FF00100 		mov	r0, #1
 732 0528 1946     		mov	r1, r3
 733 052a FFF7FEFF 		bl	DCM_goToPos
 210:../Krusty/KPlate.c **** 	DCM_restart(PLATE_DCMOTOR_ID);
 734              		.loc 1 210 0
 735 052e 4FF00100 		mov	r0, #1
 736 0532 FFF7FEFF 		bl	DCM_restart
 737              	.L25:
 211:../Krusty/KPlate.c **** }
 738              		.loc 1 211 0
 739 0536 07F11007 		add	r7, r7, #16
 740 053a BD46     		mov	sp, r7
 741 053c 80BD     		pop	{r7, pc}
 742              		.cfi_endproc
 743              	.LFE117:
 745              		.section	.rodata
 746 00c5 000000   		.align	2
 747              	.LC6:
 748 00c8 54726163 		.ascii	"Trace: %s line: 218 At position %d\012\000"
 748      653A2025 
 748      73206C69 
 748      6E653A20 
 748      32313820 
 749              		.text
 750 053e 00BF     		.align	2
 751              		.thumb
 752              		.thumb_func
 754              	PLATE_rotation_command_run:
 755              	.LFB118:
 212:../Krusty/KPlate.c **** 
 213:../Krusty/KPlate.c **** //Gestion des états en cours d'exécution de la commande de rotation
 214:../Krusty/KPlate.c **** static void PLATE_rotation_command_run(queue_id_t queueId) {
 756              		.loc 1 214 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 16
 759              		@ frame_needed = 1, uses_anonymous_args = 0
 760 0540 80B5     		push	{r7, lr}
 761              	.LCFI18:
 762              		.cfi_def_cfa_offset 8
 763              		.cfi_offset 7, -8
 764              		.cfi_offset 14, -4
 765 0542 86B0     		sub	sp, sp, #24
 766              	.LCFI19:
 767              		.cfi_def_cfa_offset 32
 768 0544 02AF     		add	r7, sp, #8
 769              	.LCFI20:
 770              		.cfi_def_cfa 7, 24
 771 0546 0346     		mov	r3, r0
 772 0548 FB71     		strb	r3, [r7, #7]
 215:../Krusty/KPlate.c **** 	Uint8 result, errorCode;
 216:../Krusty/KPlate.c **** 	Uint16 line;
 217:../Krusty/KPlate.c **** 
 218:../Krusty/KPlate.c **** 	trace_printf("At position %d\n", PLATE_getRotationAngle());
 773              		.loc 1 218 0
 774 054a FFF717FF 		bl	PLATE_getRotationAngle
 775 054e 0346     		mov	r3, r0
 776 0550 4FF00600 		mov	r0, #6
 777 0554 40F20001 		movw	r1, #:lower16:.LC6
 778 0558 C0F20001 		movt	r1, #:upper16:.LC6
 779 055c 40F20002 		movw	r2, #:lower16:__func__.6497
 780 0560 C0F20002 		movt	r2, #:upper16:__func__.6497
 781 0564 FFF7FEFF 		bl	OUTPUTLOG_printf
 219:../Krusty/KPlate.c **** 
 220:../Krusty/KPlate.c **** 	if(ACTQ_check_status_dcmotor(PLATE_DCMOTOR_ID, FALSE, &result, &errorCode, &line))
 782              		.loc 1 220 0
 783 0568 07F10F02 		add	r2, r7, #15
 784 056c 07F10E03 		add	r3, r7, #14
 785 0570 07F10C01 		add	r1, r7, #12
 786 0574 0091     		str	r1, [sp, #0]
 787 0576 4FF00100 		mov	r0, #1
 788 057a 4FF00001 		mov	r1, #0
 789 057e FFF7FEFF 		bl	ACTQ_check_status_dcmotor
 790 0582 0346     		mov	r3, r0
 791 0584 002B     		cmp	r3, #0
 792 0586 09D0     		beq	.L34
 221:../Krusty/KPlate.c **** 		QUEUE_next(queueId, ACT_PLATE, result, errorCode, line);
 793              		.loc 1 221 0
 794 0588 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 795 058a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 796 058c B889     		ldrh	r0, [r7, #12]
 797 058e F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 798 0590 0090     		str	r0, [sp, #0]
 799 0592 0846     		mov	r0, r1
 800 0594 40F21231 		movw	r1, #786
 801 0598 FFF7FEFF 		bl	QUEUE_next
 802              	.L34:
 222:../Krusty/KPlate.c **** }
 803              		.loc 1 222 0
 804 059c 07F11007 		add	r7, r7, #16
 805 05a0 BD46     		mov	sp, r7
 806 05a2 80BD     		pop	{r7, pc}
 807              		.cfi_endproc
 808              	.LFE118:
 810              		.section	.rodata
 811              		.align	2
 812              	.LC7:
 813 00ec 504C3A20 		.ascii	"PL: Invalid plier command: %u, code is broken !\012"
 813      496E7661 
 813      6C696420 
 813      706C6965 
 813      7220636F 
 814 011c 00       		.ascii	"\000"
 815 011d 000000   		.align	2
 816              	.LC8:
 817 0120 504C3A20 		.ascii	"PL: Invalid plier position: %u, code is broken !\012"
 817      496E7661 
 817      6C696420 
 817      706C6965 
 817      7220706F 
 818 0151 00       		.ascii	"\000"
 819 0152 0000     		.align	2
 820              	.LC9:
 821 0154 504C3A20 		.ascii	"PL: Move plier ax12 to %d\012\000"
 821      4D6F7665 
 821      20706C69 
 821      65722061 
 821      78313220 
 822 016f 00       		.align	2
 823              	.LC10:
 824 0170 504C3A20 		.ascii	"PL: AX12_set_position error: 0x%x\012\000"
 824      41583132 
 824      5F736574 
 824      5F706F73 
 824      6974696F 
 825              		.text
 826              		.align	2
 827              		.thumb
 828              		.thumb_func
 830              	PLATE_plier_command_init:
 831              	.LFB119:
 223:../Krusty/KPlate.c **** 
 224:../Krusty/KPlate.c **** //Initialise une commande de la pince à assiette
 225:../Krusty/KPlate.c **** static void PLATE_plier_command_init(queue_id_t queueId) {
 832              		.loc 1 225 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 32
 835              		@ frame_needed = 1, uses_anonymous_args = 0
 836 05a4 80B5     		push	{r7, lr}
 837              	.LCFI21:
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 7, -8
 840              		.cfi_offset 14, -4
 841 05a6 8AB0     		sub	sp, sp, #40
 842              	.LCFI22:
 843              		.cfi_def_cfa_offset 48
 844 05a8 02AF     		add	r7, sp, #8
 845              	.LCFI23:
 846              		.cfi_def_cfa 7, 40
 847 05aa 0346     		mov	r3, r0
 848 05ac FB73     		strb	r3, [r7, #15]
 226:../Krusty/KPlate.c **** 	Uint8 command = QUEUE_get_arg(queueId)->canCommand;
 849              		.loc 1 226 0
 850 05ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 851 05b0 1846     		mov	r0, r3
 852 05b2 FFF7FEFF 		bl	QUEUE_get_arg
 853 05b6 0346     		mov	r3, r0
 854 05b8 1B78     		ldrb	r3, [r3, #0]
 855 05ba FB77     		strb	r3, [r7, #31]
 227:../Krusty/KPlate.c **** 	Uint16* ax12_goalPosition = &QUEUE_get_arg(queueId)->param;
 856              		.loc 1 227 0
 857 05bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 858 05be 1846     		mov	r0, r3
 859 05c0 FFF7FEFF 		bl	QUEUE_get_arg
 860 05c4 0346     		mov	r3, r0
 861 05c6 03F10203 		add	r3, r3, #2
 862 05ca BB61     		str	r3, [r7, #24]
 228:../Krusty/KPlate.c **** 
 229:../Krusty/KPlate.c **** 	*ax12_goalPosition = 0xFFFF;
 863              		.loc 1 229 0
 864 05cc BB69     		ldr	r3, [r7, #24]
 865 05ce 4FF6FF72 		movw	r2, #65535
 866 05d2 1A80     		strh	r2, [r3, #0]	@ movhi
 230:../Krusty/KPlate.c **** 
 231:../Krusty/KPlate.c **** 	switch(command) {
 867              		.loc 1 231 0
 868 05d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 869 05d6 112B     		cmp	r3, #17
 870 05d8 04D0     		beq	.L39
 871 05da 1F2B     		cmp	r3, #31
 872 05dc 0CD0     		beq	.L40
 873 05de 102B     		cmp	r3, #16
 874 05e0 05D0     		beq	.L38
 875 05e2 1DE0     		b	.L44
 876              	.L39:
 232:../Krusty/KPlate.c **** 		case ACT_PLATE_PLIER_OPEN:  *ax12_goalPosition = PLATE_PLIER_AX12_OPEN_POS; break;
 877              		.loc 1 232 0
 878 05e4 BB69     		ldr	r3, [r7, #24]
 879 05e6 4FF05A02 		mov	r2, #90
 880 05ea 1A80     		strh	r2, [r3, #0]	@ movhi
 881 05ec 30E0     		b	.L41
 882              	.L38:
 233:../Krusty/KPlate.c **** 		case ACT_PLATE_PLIER_CLOSE: *ax12_goalPosition = PLATE_PLIER_AX12_CLOSED_POS; break;
 883              		.loc 1 233 0
 884 05ee BB69     		ldr	r3, [r7, #24]
 885 05f0 4FF0C802 		mov	r2, #200
 886 05f4 1A80     		strh	r2, [r3, #0]	@ movhi
 887 05f6 2BE0     		b	.L41
 888              	.L40:
 234:../Krusty/KPlate.c **** 		case ACT_PLATE_PLIER_STOP:
 235:../Krusty/KPlate.c **** 			AX12_set_torque_enabled(PLATE_PLIER_AX12_ID, FALSE); //Stopper l'asservissement de l'AX12 qui gè
 889              		.loc 1 235 0
 890 05f8 4FF00300 		mov	r0, #3
 891 05fc 4FF00001 		mov	r1, #0
 892 0600 FFF7FEFF 		bl	AX12_set_torque_enabled
 236:../Krusty/KPlate.c **** 			QUEUE_next(queueId, ACT_PLATE, ACT_RESULT_DONE, ACT_RESULT_ERROR_OK, __LINE__);
 893              		.loc 1 236 0
 894 0604 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 895 0606 4FF0EC02 		mov	r2, #236
 896 060a 0092     		str	r2, [sp, #0]
 897 060c 1846     		mov	r0, r3
 898 060e 40F21231 		movw	r1, #786
 899 0612 4FF00002 		mov	r2, #0
 900 0616 4FF00003 		mov	r3, #0
 901 061a FFF7FEFF 		bl	QUEUE_next
 237:../Krusty/KPlate.c **** 			return;
 902              		.loc 1 237 0
 903 061e 70E0     		b	.L36
 904              	.L44:
 238:../Krusty/KPlate.c **** 
 239:../Krusty/KPlate.c **** 		default: {
 240:../Krusty/KPlate.c **** 				error_printf("Invalid plier command: %u, code is broken !\n", command);
 905              		.loc 1 240 0
 906 0620 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 907 0622 4FF00200 		mov	r0, #2
 908 0626 40F20001 		movw	r1, #:lower16:.LC7
 909 062a C0F20001 		movt	r1, #:upper16:.LC7
 910 062e 1A46     		mov	r2, r3
 911 0630 FFF7FEFF 		bl	OUTPUTLOG_printf
 241:../Krusty/KPlate.c **** 				QUEUE_next(queueId, ACT_PLATE, ACT_RESULT_NOT_HANDLED, ACT_RESULT_ERROR_LOGIC, __LINE__);
 912              		.loc 1 241 0
 913 0634 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 914 0636 4FF0F102 		mov	r2, #241
 915 063a 0092     		str	r2, [sp, #0]
 916 063c 1846     		mov	r0, r3
 917 063e 40F21231 		movw	r1, #786
 918 0642 4FF00202 		mov	r2, #2
 919 0646 4FF00403 		mov	r3, #4
 920 064a FFF7FEFF 		bl	QUEUE_next
 242:../Krusty/KPlate.c **** 				return;
 921              		.loc 1 242 0
 922 064e 58E0     		b	.L36
 923              	.L41:
 243:../Krusty/KPlate.c **** 			}
 244:../Krusty/KPlate.c **** 	}
 245:../Krusty/KPlate.c **** 	if(*ax12_goalPosition == 0xFFFF) {
 924              		.loc 1 245 0
 925 0650 BB69     		ldr	r3, [r7, #24]
 926 0652 1A88     		ldrh	r2, [r3, #0]
 927 0654 4FF6FF73 		movw	r3, #65535
 928 0658 9A42     		cmp	r2, r3
 929 065a 17D1     		bne	.L43
 246:../Krusty/KPlate.c **** 		error_printf("Invalid plier position: %u, code is broken !\n", command);
 930              		.loc 1 246 0
 931 065c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 932 065e 4FF00200 		mov	r0, #2
 933 0662 40F20001 		movw	r1, #:lower16:.LC8
 934 0666 C0F20001 		movt	r1, #:upper16:.LC8
 935 066a 1A46     		mov	r2, r3
 936 066c FFF7FEFF 		bl	OUTPUTLOG_printf
 247:../Krusty/KPlate.c **** 		QUEUE_next(queueId, ACT_PLATE, ACT_RESULT_NOT_HANDLED, ACT_RESULT_ERROR_LOGIC, __LINE__);
 937              		.loc 1 247 0
 938 0670 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 939 0672 4FF0F702 		mov	r2, #247
 940 0676 0092     		str	r2, [sp, #0]
 941 0678 1846     		mov	r0, r3
 942 067a 40F21231 		movw	r1, #786
 943 067e 4FF00202 		mov	r2, #2
 944 0682 4FF00403 		mov	r3, #4
 945 0686 FFF7FEFF 		bl	QUEUE_next
 248:../Krusty/KPlate.c **** 		return;
 946              		.loc 1 248 0
 947 068a 3AE0     		b	.L36
 948              	.L43:
 249:../Krusty/KPlate.c **** 	}
 250:../Krusty/KPlate.c **** 
 251:../Krusty/KPlate.c **** 	debug_printf("Move plier ax12 to %d\n", *ax12_goalPosition);
 949              		.loc 1 251 0
 950 068c BB69     		ldr	r3, [r7, #24]
 951 068e 1B88     		ldrh	r3, [r3, #0]
 952 0690 4FF00500 		mov	r0, #5
 953 0694 40F20001 		movw	r1, #:lower16:.LC9
 954 0698 C0F20001 		movt	r1, #:upper16:.LC9
 955 069c 1A46     		mov	r2, r3
 956 069e FFF7FEFF 		bl	OUTPUTLOG_printf
 252:../Krusty/KPlate.c **** 	AX12_reset_last_error(PLATE_PLIER_AX12_ID); //Sécurité anti terroriste. Nous les parano on aime pa
 957              		.loc 1 252 0
 958 06a2 4FF00300 		mov	r0, #3
 959 06a6 FFF7FEFF 		bl	AX12_reset_last_error
 253:../Krusty/KPlate.c **** 	if(!AX12_set_position(PLATE_PLIER_AX12_ID, *ax12_goalPosition)) {	//Si la commande n'a pas été env
 960              		.loc 1 253 0
 961 06aa BB69     		ldr	r3, [r7, #24]
 962 06ac 1B88     		ldrh	r3, [r3, #0]
 963 06ae 4FF00300 		mov	r0, #3
 964 06b2 1946     		mov	r1, r3
 965 06b4 FFF7FEFF 		bl	AX12_set_position
 966 06b8 0346     		mov	r3, r0
 967 06ba 002B     		cmp	r3, #0
 968 06bc 21D1     		bne	.L36
 254:../Krusty/KPlate.c **** 		error_printf("AX12_set_position error: 0x%x\n", AX12_get_last_error(PLATE_PLIER_AX12_ID).error);
 969              		.loc 1 254 0
 970 06be 4FF00300 		mov	r0, #3
 971 06c2 FFF7FEFF 		bl	AX12_get_last_error
 972 06c6 3880     		strh	r0, [r7, #0]	@ movhi
 973 06c8 C0F30F43 		ubfx	r3, r0, #16, #16
 974 06cc 7B80     		strh	r3, [r7, #2]	@ movhi
 975 06ce 3B68     		ldr	r3, [r7, #0]
 976 06d0 7B61     		str	r3, [r7, #20]
 977 06d2 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 978 06d4 4FF00200 		mov	r0, #2
 979 06d8 40F20001 		movw	r1, #:lower16:.LC10
 980 06dc C0F20001 		movt	r1, #:upper16:.LC10
 981 06e0 1A46     		mov	r2, r3
 982 06e2 FFF7FEFF 		bl	OUTPUTLOG_printf
 255:../Krusty/KPlate.c **** 		QUEUE_next(queueId, ACT_PLATE, ACT_RESULT_FAILED, ACT_RESULT_ERROR_NOT_HERE, __LINE__);
 983              		.loc 1 255 0
 984 06e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 985 06e8 4FF0FF02 		mov	r2, #255
 986 06ec 0092     		str	r2, [sp, #0]
 987 06ee 1846     		mov	r0, r3
 988 06f0 40F21231 		movw	r1, #786
 989 06f4 4FF00102 		mov	r2, #1
 990 06f8 4FF00303 		mov	r3, #3
 991 06fc FFF7FEFF 		bl	QUEUE_next
 256:../Krusty/KPlate.c **** 		return;
 992              		.loc 1 256 0
 993 0700 00BF     		nop
 994              	.L36:
 257:../Krusty/KPlate.c **** 	}
 258:../Krusty/KPlate.c **** 	//La commande a été envoyée et l'AX12 l'a bien reçu
 259:../Krusty/KPlate.c **** }
 995              		.loc 1 259 0
 996 0702 07F12007 		add	r7, r7, #32
 997 0706 BD46     		mov	sp, r7
 998 0708 80BD     		pop	{r7, pc}
 999              		.cfi_endproc
 1000              	.LFE119:
 1002 070a 00BF     		.align	2
 1003              		.thumb
 1004              		.thumb_func
 1006              	PLATE_plier_command_run:
 1007              	.LFB120:
 260:../Krusty/KPlate.c **** 
 261:../Krusty/KPlate.c **** //Gère les états pendant le mouvement de la pince.
 262:../Krusty/KPlate.c **** static void PLATE_plier_command_run(queue_id_t queueId) {
 1008              		.loc 1 262 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 16
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012 070c 80B5     		push	{r7, lr}
 1013              	.LCFI24:
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 070e 8AB0     		sub	sp, sp, #40
 1018              	.LCFI25:
 1019              		.cfi_def_cfa_offset 48
 1020 0710 06AF     		add	r7, sp, #24
 1021              	.LCFI26:
 1022              		.cfi_def_cfa 7, 24
 1023 0712 0346     		mov	r3, r0
 1024 0714 FB71     		strb	r3, [r7, #7]
 263:../Krusty/KPlate.c **** 	Uint8 result, errorCode;
 264:../Krusty/KPlate.c **** 	Uint16 line;
 265:../Krusty/KPlate.c **** 
 266:../Krusty/KPlate.c **** 	//360° of large_epsilon, quand on a un timeout, on a forcément un resultat Ok (et pas d'erreur, on
 267:../Krusty/KPlate.c **** 	if(ACTQ_check_status_ax12(queueId, PLATE_PLIER_AX12_ID, QUEUE_get_arg(queueId)->param, PLATE_PLIER
 1025              		.loc 1 267 0
 1026 0716 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1027 0718 1846     		mov	r0, r3
 1028 071a FFF7FEFF 		bl	QUEUE_get_arg
 1029 071e 0346     		mov	r3, r0
 1030 0720 5B88     		ldrh	r3, [r3, #2]
 1031 0722 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1032 0724 4FF00A01 		mov	r1, #10
 1033 0728 0091     		str	r1, [sp, #0]
 1034 072a 4FF4B471 		mov	r1, #360
 1035 072e 0191     		str	r1, [sp, #4]
 1036 0730 07F10F01 		add	r1, r7, #15
 1037 0734 0291     		str	r1, [sp, #8]
 1038 0736 07F10E01 		add	r1, r7, #14
 1039 073a 0391     		str	r1, [sp, #12]
 1040 073c 07F10C01 		add	r1, r7, #12
 1041 0740 0491     		str	r1, [sp, #16]
 1042 0742 1046     		mov	r0, r2
 1043 0744 4FF00301 		mov	r1, #3
 1044 0748 1A46     		mov	r2, r3
 1045 074a 4FF00203 		mov	r3, #2
 1046 074e FFF7FEFF 		bl	ACTQ_check_status_ax12
 1047 0752 0346     		mov	r3, r0
 1048 0754 002B     		cmp	r3, #0
 1049 0756 09D0     		beq	.L45
 268:../Krusty/KPlate.c **** 		QUEUE_next(queueId, ACT_PLATE, result, errorCode, line);
 1050              		.loc 1 268 0
 1051 0758 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1052 075a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1053 075c B889     		ldrh	r0, [r7, #12]
 1054 075e F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1055 0760 0090     		str	r0, [sp, #0]
 1056 0762 0846     		mov	r0, r1
 1057 0764 40F21231 		movw	r1, #786
 1058 0768 FFF7FEFF 		bl	QUEUE_next
 1059              	.L45:
 269:../Krusty/KPlate.c **** }
 1060              		.loc 1 269 0
 1061 076c 07F11007 		add	r7, r7, #16
 1062 0770 BD46     		mov	sp, r7
 1063 0772 80BD     		pop	{r7, pc}
 1064              		.cfi_endproc
 1065              	.LFE120:
 1067              		.section	.rodata
 1068 0193 00       		.align	2
 1071              	__func__.6497:
 1072 0194 504C4154 		.ascii	"PLATE_rotation_command_run\000"
 1072      455F726F 
 1072      74617469 
 1072      6F6E5F63 
 1072      6F6D6D61 
 1073 01af 00       		.bss
 1074              	ax12_is_initialized.6452:
 1075 0000 00       		.space	1
 1076              	initialized.6449:
 1077 0001 00       		.space	1
 1078              		.text
 1079              	.Letext0:
 1080              		.file 2 "c:\\program files (x86)\\eclipse-arm-eseo\\gcc-arm-none-eabi-4_7-2013q2-20130614-win32\\g
 1081              		.file 3 "../stm32f4xx/stm32f4xx.h"
 1082              		.file 4 "../Krusty/../QS/QS_types.h"
 1083              		.file 5 "../config/config_krusty/config_global_vars_types.h"
 1084              		.file 6 "../Krusty/../queue.h"
 1085              		.file 7 "../Krusty/../QS/QS_DCMotor2.h"
 1086              		.file 8 "../Krusty/../QS/QS_outputlog.h"
 1087              		.file 9 "../stm32f4xx/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 KPlate.c
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:19     .rodata:00000000 $d
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:20     .rodata:00000000 .LC1
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:24     .text:00000000 $t
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:29     .text:00000000 PLATE_init
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:1076   .bss:00000001 initialized.6449
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:476    .text:0000037c PLATE_getRotationAngle
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:140    .text:000000bc PLATE_initAX12
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:133    .rodata:0000002c .LC2
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:1074   .bss:00000000 ax12_is_initialized.6452
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:219    .text:0000015c PLATE_stop
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:243    .rodata:00000048 .LC3
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:246    .rodata:0000006c .LC0
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:257    .text:0000016c PLATE_CAN_process_msg
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:505    .text:00000390 PLATE_run_command
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:605    .text:0000040c PLATE_rotation_command_init
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:754    .text:00000540 PLATE_rotation_command_run
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:830    .text:000005a4 PLATE_plier_command_init
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:1006   .text:0000070c PLATE_plier_command_run
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:594    .rodata:00000074 .LC4
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:598    .rodata:000000a8 .LC5
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:640    .text:00000434 $d
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:658    .text:00000474 $t
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:747    .rodata:000000c8 .LC6
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:1071   .rodata:00000194 __func__.6497
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:812    .rodata:000000ec .LC7
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:816    .rodata:00000120 .LC8
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:820    .rodata:00000154 .LC9
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:823    .rodata:00000170 .LC10
C:\Users\Amaury\AppData\Local\Temp\ccWlsTJ5.s:1075   .bss:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.13c6c37fe6ef97541a459ad1f2cd1ddb
                           .group:00000000 wm4.stm32f4xx.h.54.d172d9d6631f11a8436908e748990b53
                           .group:00000000 wm4.core_cm4.h.32.39d0f71cd333856d56f1935d9037195e
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.163.d36d54ebc869626f337c4fcb95a9b424
                           .group:00000000 wm4.stm32f4xx.h.306.7867854ab89778ccd63e1fde7c22c0b6
                           .group:00000000 wm4.stm32f4xx_rcc.h.65.29a27820bc754566c4190ed8ad1c1d80
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.7233.cb6cb3cb095c29e1fc0eb152d26090b1
                           .group:00000000 wm4.Global_config.h.14.bea53ddf4045d71f1c9fb87037131e8e
                           .group:00000000 wm4.config_global.h.12.5c30ea43d7f0d9daa101874e8ba75f6f
                           .group:00000000 wm4.config_qs.h.12.4699be7196e891fb4cd84d522e29cde7
                           .group:00000000 wm4.config_qs.h.12.8e0ab7f7cbbdaecfb1e464f5610b5d86
                           .group:00000000 wm4.QS_macro.h.19.3d2533714681986d2ad8c517737c4640
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.QS_timer.h.23.f1c7374d1ffe22793578c04386c6b1e2
                           .group:00000000 wm4.queue.h.39.c6c83c771916888b8b8278e5c5477b11
                           .group:00000000 wm4.QS_CANmsgList.h.18.4820ab5d82fa43f9421f4e5eb46c19bc
                           .group:00000000 wm4.QS_ax12.h.14.bdca40ad9d76c87d4eb8bcff38d0d363
                           .group:00000000 wm4.config_pin.h.12.92dbe1317fae649a069f2ce6e5ad725c
                           .group:00000000 wm4.config_pin.h.12.20ee5a96fdfc3c7ca3bc6056aaec7473
                           .group:00000000 wm4.KPlate_config.h.13.e03a2d7eb154bd4130bd66f1db73cfe3
                           .group:00000000 wm4.config_debug.h.12.ce495d07741075ca26554eb90b0ab381
                           .group:00000000 wm4.QS_outputlog.h.12.497571275ee7bc35db4cbeb19919be7a

UNDEFINED SYMBOLS
DCM_init
AX12_init
ADC_init
DCM_config
DCM_stop
OUTPUTLOG_printf
AX12_is_ready
AX12_config_set_highest_voltage
AX12_config_set_lowest_voltage
AX12_config_set_maximum_torque_percentage
AX12_config_set_maximal_angle
AX12_config_set_minimal_angle
AX12_config_set_error_before_led
AX12_config_set_error_before_shutdown
AX12_set_position
ACTQ_finish_SendResultIfFail
ACTQ_push_operation_from_msg
QUEUE_create
QUEUE_take_sem
QUEUE_add
ACTQ_finish_SendResult
QUEUE_give_sem
ACTQ_sendResultWitExplicitLine
ADC_getValue
QUEUE_has_error
QUEUE_behead
QUEUE_get_act
QUEUE_get_arg
DCM_setCoefs
QUEUE_next
DCM_getPosValue
DCM_goToPos
DCM_restart
ACTQ_check_status_dcmotor
AX12_set_torque_enabled
AX12_reset_last_error
AX12_get_last_error
ACTQ_check_status_ax12
